{"version":3,"sources":["components/Transactions.js","App.js","index.js"],"names":["Transactions","props","state","info","errorMsg","transactions","address","a","console","log","detectEthereumProvider","window","ethereum","request","method","accounts","error","process","requestString","axios","get","then","response","transactionsSent","data","result","filter","txn","from","toLowerCase","setState","gasPrice","map","parseInt","gasPriceTotal","reduce","b","gasUsed","gasUsedTotal","totalTransactionsFees","multiply","meanGasPrice","mean","length","binancecoin","usd","Number","this","catch","className","toFixed","toLocaleString","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cb9fe651.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport axios from 'axios'\r\nimport detectEthereumProvider from '@metamask/detect-provider';\r\n// import Tip from './Tip'\r\nimport './Transactions.css'\r\nimport {\r\n    multiply, mean\r\n  } from 'mathjs'\r\n\r\nexport class Transactions extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            info: {},\r\n            errorMsg: '',\r\n            transactions: [],\r\n            address: ''\r\n        }\r\n    }\r\n\r\n    // executed when the component is first mounted and will only execute once during the component's lifetime\r\n    async componentDidMount() { \r\n        console.log(\"entering componentDidMount\")\r\n        let address = -1\r\n        try {\r\n            const provider = await detectEthereumProvider();\r\n        \r\n            if (provider) {\r\n                // From now on, this should always be true:\r\n                // provider === window.ethereum\r\n                const { ethereum } = window;\r\n                try {\r\n                // Will open the MetaMask UI\r\n                // You should disable this button while the request is pending!\r\n                const accounts = await ethereum.request({ method: 'eth_requestAccounts' });\r\n                console.log(accounts)\r\n                \r\n                address = accounts[0]\r\n                \r\n                } catch (error) {\r\n                console.error(error);\r\n                }\r\n            } else {\r\n                console.log('Please install MetaMask!');\r\n            }\r\n            console.log(process.env)\r\n        } catch (err) {\r\n            console.log(\"Could not load metamask\")\r\n        }\r\n\r\n        // let address = process.env.REACT_APP_TEST_ADDRESS\r\n        console.log(address)\r\n        let apikey = process.env.REACT_APP_BSCSCAN_APIKEY\r\n        let transactions = []\r\n        let info = {}\r\n\r\n        const requestString = `https://api.bscscan.com/api?module=account&action=txlist&address=${address}&startblock=1&endblock=99999999&sort=asc&apikey=${apikey}`\r\n        \r\n        axios.get(requestString)\r\n        .then(response => {\r\n            // console.log(response.data.result);\r\n            transactions = response.data.result\r\n            \r\n            const transactionsSent = transactions.filter(txn => txn.from === address.toLowerCase())\r\n            // const transactionsSent = transactions => transactions.from \r\n            // console.log(transactionsSent)\r\n\r\n            this.setState({transactions: transactions})\r\n\r\n            // console.log(\"transactions\")\r\n            // console.log(transactions)\r\n\r\n            const gasPrice = transactions.map(transactions => parseInt(transactions.gasPrice))\r\n            const gasPriceTotal = gasPrice.reduce((a, b) => parseInt(a) + parseInt(b), 0)\r\n            // console.log(gasPrice)\r\n\r\n            const gasUsed = transactions.map(transactions => parseInt(transactions.gasUsed))\r\n            const gasUsedTotal = gasUsed.reduce((a, b) => parseInt(a) + parseInt(b), 0)\r\n            // console.log(gasUsed)\r\n\r\n            // elementwise array multiplication\r\n            let totalTransactionsFees =  multiply(gasPrice, gasUsed)\r\n\r\n            // average price of gas as 1e9 BNB = 1 gwei\r\n            const meanGasPrice = parseInt(mean(gasPrice)/1e9)\r\n\r\n            // prepares dict with user-presenting values\r\n\r\n            info[\"transactionsSent\"] = transactionsSent.length\r\n            info[\"gasPrice\"] = gasPrice\r\n            info[\"gasUsed\"] = gasPriceTotal\r\n            info[\"gasPriceTotal\"] = gasUsed\r\n            info[\"gasUsedTotal\"] = gasUsedTotal\r\n            info[\"totalTransactionsFees\"] = totalTransactionsFees\r\n            info[\"meanGasPrice\"] = meanGasPrice\r\n\r\n            axios.get('https://api.coingecko.com/api/v3/simple/price?ids=binancecoin&vs_currencies=usd')\r\n            .then(response => {\r\n                console.log(\"bnb price in usd \" + response.data.binancecoin.usd);\r\n                info[\"bnbPrice\"] = Number(response.data.binancecoin.usd)\r\n                this.setState({ info : info }, function() { console.log(\"setState completed\", this.state)})\r\n                // this.setState({ info : info }, function() { console.log(\"setState completed\", this.state)})\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                this.setState({errorMsg: 'Error retrieving price data'})\r\n            });\r\n\r\n        })\r\n        .catch(error => {\r\n            console.log(error);\r\n            this.setState({errorMsg: 'Error retrieving data. Have you installed Metamask?'})\r\n        });\r\n      }\r\n\r\n    // TODO write number formatter\r\n    // TODO confirm sender is address\r\n    render() {\r\n        // destructure the state property\r\n        const { transactions, errorMsg, info} = this.state\r\n\r\n        console.log(this.state)\r\n\r\n        // console.log(info[\"bnbPrice\"])\r\n\r\n        return (\r\n            <div className=\"Transactions-body\">\r\n                <div className=\"Transactions-text\">\r\n                    {/* Total funds in account <span className=\"Transactions-value\">{ (accountBalance * Math.pow(10, -18)).toFixed(3) }</span> BNB.\r\n                    <br/> */}\r\n                    You've spent <span className=\"Transactions-value\">{(info[\"totalTransactionsFees\"]/1e18).toFixed(3)}</span> BNB on gas. As of today, that's worth \r\n                    <span className=\"Transactions-value\"> ${Number((info[\"bnbPrice\"]*(info[\"totalTransactionsFees\"]/1e18))).toLocaleString()}</span>\r\n                    <br/>\r\n                    <br/>\r\n                    You've used <span className=\"Transactions-value\">{Number(info[\"gasUsedTotal\"]).toLocaleString()}</span> gas to send <span className=\"Transactions-value\">{Number(info[\"transactionsSent\"])}</span> transactions, with an average price of <span className=\"Transactions-value\">{Number(info[\"meanGasPrice\"]).toLocaleString()}</span> gwei.\r\n                    <br/>\r\n                    <p className=\"Transactions-tips\">Consider a tip :D | 0x33F3a9845AF04022c3A9576494089a74c78d150c</p>\r\n                    {/* NAN of them failed, costing you NAN. */}\r\n                </div>\r\n                \r\n                { errorMsg ? <div>{errorMsg}</div> : null }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Transactions\r\n","import './App.css';\nimport Transactions from './components/Transactions'\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Transactions />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}